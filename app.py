import streamlit as st
import hydralit_components as hc
import os
import json
from dotenv import load_dotenv, find_dotenv
import tempfile

from src.functions import (
    DataExtractor,
    OpenAIClient,
    Summarizer,
    MarketingResearchAssistant_v1,
    MarketingResearchAssistant_v2,
    DocumentProcessor,
)

# Load environment variables
load_dotenv(find_dotenv())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Initialize your classes
openai_client = OpenAIClient()
summarizer = Summarizer(openai_client)
assistant_v1 = MarketingResearchAssistant_v1()
doc_processor = DocumentProcessor()
query_processor = MarketingResearchAssistant_v2()

# Style
css = """
<style>
    .title {
        font-size: 36px;
        font-weight: bold;
        color: #2D3E50;
    }
    .subtitle {
        font-size: 24px;
        font-weight: bold;
        color: #4A6F8A;
    }
    .description {
        font-size: 18px;
        color: #6C8798;
    }
</style>
"""

# Page Configuration
st.set_page_config(
    page_title="Modjo Conversation Analysis Tool",
    page_icon=":robot:", layout="wide"
)
st.markdown(css, unsafe_allow_html=True)

over_theme = {
    "bgcolor": "rgba(0,0,0,0)",
    "title_color": "#FFFFFF",
    "content_color": "#FFFFFF",
    "icon_color": "#FFFFFF",
    "icon_size": 26,
    "option_border": "2px solid #FF9800",
    "container_border": "2px solid #2196F3",
}


def main():
    st.markdown(
        """<h1 style='text-align: center;
                background-color: #2D3E50;
                color: #FFFFFF'>Modjo Conversation Analysis Tool</h1>""",
        unsafe_allow_html=True,
    )

    menu_data = [
        {"icon": "‚ÑπÔ∏è", "label": "About"}
    ]

    menu_id = hc.nav_bar(
        menu_definition=menu_data,
        override_theme=over_theme,
        home_name="Home",
        hide_streamlit_markers=True,
        sticky_nav=True,
        sticky_mode="pinned",
    )

    if menu_id == "About":
        about()
    else:
        home()


def home():
    st.markdown(
        "<div class='title'>Welcome to Modjo Conversation Analysis Tool</div>",
        unsafe_allow_html=True,
    )
    option_data = [
            {"icon": "üìù", "label": "Summarization"},
            {"icon": "‚ùì", "label": "Question Answering"},
    ]
    font_fmt = {"font-class": "h2", "font-size": "100%"}

    conversation_option = hc.option_bar(
            option_definition=option_data,
            title="Que vous voulez faire ?",
            key="PrimaryOption_",
            override_theme=over_theme,
            font_styling=font_fmt,
            horizontal_orientation=True,
        )
    upload_file()
    if conversation_option == "Summarization":
        summarization()
    elif conversation_option == "Question Answering":
        question_answering()


def about():
    st.markdown(
        """<div class='title'>√Ä propos de Modjo Conversation
                Analysis Tool</div>""",
        unsafe_allow_html=True,
    )

    st.markdown(
        """
    <div class='description'>
    Modjo Conversation Analysis Tool est une application puissante con√ßue pour
    analyser et extraire des informations pr√©cieuses des conversations
    d'affaires.
    En utilisant des technologies avanc√©es d'intelligence artificielle, notre
    outil offre des fonctionnalit√©s uniques pour am√©liorer votre compr√©hension
    et votre prise de d√©cision.

    Principales caract√©ristiques :

    1. <b>Extraction et transformation des donn√©es :</b> Notre outil peut
    extraire efficacement des donn√©es √† partir de fichiers JSON et les
    transformer en un format facilement analysable.

    2. <b>R√©sum√©s intelligents :</b> G√©n√©rez des r√©sum√©s concis de 60 mots,
    des r√©sum√©s d√©taill√©s au format libre, ou des r√©sum√©s structur√©s pour
    obtenir rapidement les points cl√©s de chaque conversation.

    3. <b>Analyse bas√©e sur l'IA :</b> Utilisez notre assistant de recherche
    aliment√© par l'IA pour poser des questions sp√©cifiques sur le contenu
    de la conversation et obtenir des r√©ponses pr√©cises.

    4. <b>Traitement avanc√© des documents :</b> Notre processeur de documents
    peut charger, diviser et vectoriser les conversations pour une recherche
    et une analyse plus efficaces.

    5. <b>Interface utilisateur intuitive :</b> Gr√¢ce √† l'int√©gration de
    Streamlit et Hydralit, nous offrons une exp√©rience utilisateur fluide
    et agr√©able.

    Que vous soyez un professionnel des ventes, un responsable marketing ou
    un analyste d'entreprise, Modjo Conversation Analysis Tool vous aide √†
    tirer le meilleur parti de vos interactions client, √† identifier les
    tendances importantes et √† prendre des d√©cisions √©clair√©es bas√©es sur
    des donn√©es concr√®tes.
    </div>
    """,
        unsafe_allow_html=True,
    )

    st.markdown("<div class='subtitle'>Technologie</div>",
                unsafe_allow_html=True)
    st.markdown(
        """
    <div class='description'>
    Notre application utilise des technologies de pointe en mati√®re
    d'intelligence artificielle et de traitement du langage naturel,
    notamment :

    - OpenAI API pour la g√©n√©ration de texte et l'analyse de contenu
    - LangChain pour le traitement avanc√© des documents et la cr√©ation
    de cha√Ænes de requ√™tes
    - Streamlit et Hydralit pour une interface utilisateur web r√©active
    et moderne

    Toutes ces technologies sont soigneusement int√©gr√©es pour offrir une
    exp√©rience utilisateur fluide et des r√©sultats pr√©cis.
    </div>
    """,
        unsafe_allow_html=True,
    )

    st.markdown(
        "<div class='subtitle'>Confidentialit√© et s√©curit√©</div>",
        unsafe_allow_html=True,
    )
    st.markdown(
        """
    <div class='description'>
    Chez Modjo, nous prenons la confidentialit√© et la s√©curit√© de vos donn√©es
    tr√®s au s√©rieux. Toutes les conversations analys√©es sont trait√©es de
    mani√®re s√©curis√©e et ne sont pas stock√©es apr√®s l'analyse. Nous utilisons
    des protocoles de cryptage standard de l'industrie pour prot√©ger vos
    informations pendant la transmission et le traitement.
    </div>
    """,
        unsafe_allow_html=True,
    )


def upload_file():
    st.markdown(
        "<div class='subtitle'>Upload Conversation File</div>",
        unsafe_allow_html=True
    )
    uploaded_file = st.file_uploader("Choose a conversation file", type="json")

    if uploaded_file is not None:
        json_data = json.load(uploaded_file)
        dataextractor = DataExtractor(json_data)
        conversation = dataextractor.data_frame_to_text()
        with st.expander("Conversation Content"):
            st.text_area("", conversation, height=200)
        st.session_state["conversation"] = conversation
        st.success("File uploaded successfully!")


def summarization():
    st.markdown("<div class='subtitle'>Summarization</div>",
                unsafe_allow_html=True)
    if "conversation" not in st.session_state:
        st.warning("Please upload a file first.")
        return

    if st.button("Generate Summaries"):
        with st.spinner("Generating summaries..."):
            summary_60 = summarizer.summarize_60_words(
                st.session_state["conversation"]
            )
            summary_free = summarizer.summarize_free_format(
                st.session_state["conversation"]
            )
            summary_structured = summarizer.summarize_structured(
                st.session_state["conversation"]
            )

        tab1, tab2, tab3 = st.tabs(
            ["60-word Summary", "Free-format Summary", "Structured Summary"]
        )
        with tab1:
            st.write(summary_60.replace("`", ""))
        with tab2:
            st.write(summary_free)
        with tab3:
            st.write(summary_structured)


def question_answering():
    st.markdown(
        "<div class='subtitle'>Question Answering</div>",
        unsafe_allow_html=True
    )
    if "conversation" not in st.session_state:
        st.warning("Please upload a file first.")
        return

    question = st.text_input("Enter your question about the conversation")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Answer with v1"):
            with st.spinner("Generating answer..."):
                answer_v1 = assistant_v1.rag(
                    question,
                    st.session_state["conversation"]
                )
            st.write(answer_v1)

    with col2:
        if st.button("Answer with v2"):
            with st.spinner("Processing documents..."):
                with tempfile.NamedTemporaryFile(
                    delete=False, mode="w+", suffix=".txt", encoding="utf-8"
                ) as temp_file:
                    temp_file.write(st.session_state["conversation"])
                    temp_file_path = temp_file.name
                texts = doc_processor.load_and_split_documents(temp_file_path)
                vectordb = doc_processor.create_vector_store(texts)
                chain = query_processor.create_retrieval_chain(vectordb)
                os.unlink(temp_file_path)

            with st.spinner("Generating answer..."):
                answer_v2 = query_processor.process_query(chain, question)
            st.write(answer_v2)


def footer():
    st.markdown(
        """
        <style>
        .footer {
            position: fixed;
            left: 0;
            bottom: 0;
            width: 100%;
            background-color: #2C3E50;
            color: white;
            text-align: center;
            padding: 10px;
            font-size: 14px;
        }
        </style>
        <div class="footer">
            ¬© 2024 Modjo Conversation Analysis Tool
            | D√©velopp√© par Bourahima
        </div>
        """,
        unsafe_allow_html=True
    )


if __name__ == "__main__":
    main()
    footer()
